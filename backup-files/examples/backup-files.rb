# Code example for ruby using ruby on rails framework
# This code was generated by chatGPT from pseudo-code
# If you spot an issue, feel free to create a PR to fix it

require 'net/http'
require 'uri'

class SlackController < ApplicationController
  def initialize
    super
    @slack_token = ENV["SLACK_API_TOKEN"]
  end

  def download_file(file_link)
    puts "Downloading file: #{file_link}"
    uri = URI.parse(file_link)
    response = Net::HTTP.get_response(uri)
    if response.code == '200'
      return response.body
    else
      puts "Error downloading file: #{file_link}"
      return nil
    end
  end

  def rewrite_message(event, new_text)
    client = Slack::Web::Client.new(token: @slack_token)

    channel_id = event["channel"]
    message_ts = event["ts"]
    begin
      response = client.chat_update(channel: channel_id, ts: message_ts, text: new_text)
      if response["ok"]
        puts "Message updated successfully!"
      else
        puts "Failed to update message: #{response['error']}"
      end
    rescue Slack::Web::Api::Errors::SlackError => e
      puts "Error updating message: #{e.response['error']}"
    end
  end

  # This is the main function of your flow, use it on your route which listens to Slack events API
  def backup_files(request_data)
    event = request_data["event"]
    event_type = request_data["type"]
    # if the event is a new thread message written by Tiny Chat bot and it contains a Tiny Chat file link
    if event_type == "message" && event["thread_ts"] && event["bot_id"] && event["text"].include?("https://files.tiny-chat.com")
      # retrieve the link from the text
      pattern = /https:\/\/files\.tiny-chat\.com\S+\|/
      match = event["text"].match(pattern)
      if match
        file_link = match[0]
        puts "Found a Tiny Chat file link: #{file_link}"
        file_content = download_file(file_link)
        if file_content
          new_file_link = nil
          # TODO: upload the file to your own storage and return the new file link
          # new_file_link = upload_to_storage(file_content)
          new_text = event["text"].gsub(pattern, new_file_link.to_s)
          rewrite_message(event, new_text)
        end
      end
    end
  end
end
